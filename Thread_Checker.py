import psutil
import subprocess
import tempfile
import json
import re
import os
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# List of excluded file extensions that can't be checked for running status
excluded_extensions = [
    '.jpg', '.jpeg', '.png', '.gif', '.bmp',  # Image files
    '.txt', '.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx',  # Document files
    '.mp3', '.wav', '.ogg', '.flac', '.aac',  # Audio files
    '.mp4', '.mkv', '.avi', '.mov', '.wmv', '.flv', '.mpeg', '.mpg',  # Video files
    '.zip', '.rar', '.tar', '.gz', '.7z'  # Compressed files
]

# Thresholds for CPU and memory usage
cpu_threshold = 80  # Example threshold for CPU usage
memory_threshold = 90  # Example threshold for memory usage

# Take the drive name as input
drive = input("Please input the drive name to check (e.g., C:):")

# Check if a script is running


def is_script_running(script_name):
    for proc in psutil.process_iter(['name']):
        if script_name in proc.info['name']:
            return True
    return False

# Check for signs of abnormal or malicious behavior


def assess_behavior(script_path):
    script_name = os.path.basename(script_path)

    if is_script_running(script_name):
        print(f"\nScript '{script_name}' is running. Assessing behavior...")

        # Check for system resource abuse
        cpu_percent = psutil.cpu_percent()
        memory_percent = psutil.virtual_memory().percent
        if cpu_percent > 90 or memory_percent > 90:
            print("WARNING!!!!! \nHigh system resource usage detected!")
        else:
            print("No High system resource usage detected......")

        # Check network connections
        for conn in psutil.net_connections(kind='inet'):
            if conn.status == 'ESTABLISHED' and conn.raddr.ip in ['malicious_ip1', 'malicious_ip2']:
                print("Suspicious network connection detected:")
                print("Local Address:", conn.laddr.ip, ":", conn.laddr.port)
                print("Remote Address:", conn.raddr.ip, ":", conn.raddr.port)
                print("---------------------------------")

        # Check file access
        for file in psutil.Process().open_files():
            if '/etc/passwd' in file.path or '/etc/shadow' in file.path:
                print("Suspicious file access detected:")
                print("File Path:", file.path)
                print("---------------------------------")

        # Check parent-child relationship
        parent_pid = psutil.Process().ppid()
        parent_process = psutil.Process(parent_pid)
        if parent_process.name() == 'unknown_process':
            print("Suspicious parent-child relationship detected:")
            print("Parent Process ID:", parent_pid)
            print("---------------------------------")
        else:
            {print("Suspicious parent-child relationship detected:")}

        # Monitor CPU and memory usage patterns
        cpu_usage_history = psutil.cpu_percent(interval=1, percpu=True)
        memory_usage_history = [psutil.virtual_memory().percent]

        # Check CPU usage patterns
        for core, usage in enumerate(cpu_usage_history):
            if usage > 90:
                print(f"High CPU usage detected on core {core + 1}!")
                print(f"Usage: {usage}%")

        # Check memory usage pattern
        if memory_usage_history[-1] > 90:
            print("High memory usage detected!")
            print(f"Usage: {memory_usage_history}%")

        # Add the current CPU and memory usage to the historical data
        cpu_usage_history.append(cpu_percent)
        memory_usage_history.append(memory_percent)

        # Check CPU and memory usage patterns over time
        if len(cpu_usage_history) > 5:  # Check the last 5 samples
            avg_cpu_usage = sum(cpu_usage_history[-5:]) / 5
            if avg_cpu_usage > cpu_threshold:  # Define your CPU threshold value
                print("High average CPU usage detected!")
            # Define your CPU threshold value
            elif max(cpu_usage_history[-5:]) > cpu_threshold:
                print("High peak CPU usage detected!")

        if len(memory_usage_history) > 5:  # Check the last 5 samples
            avg_memory_usage = sum(memory_usage_history[-5:]) / 5
            if avg_memory_usage > memory_threshold:  # Define your memory threshold value
                print("High average memory usage detected!")
            # Define your memory threshold value
            elif max(memory_usage_history[-5:]) > memory_threshold:
                print("High peak memory usage detected!")

        # Monitor system calls
        print("Script is running. Monitoring system calls...")
        # Process the system call data further if needed
        # You can analyze arguments, return values, timestamps, etc.
        # You can store the data in data structures for further analysis
    else:
        print(f"\n**** Script '{script_name}' is not running........... ")


# Initialize script count, non-script count, running/not running counts
script_count = 0
non_script_count = 0
running_count = 0
not_running_count = 0

# Get the names of all running scripts
running_scripts = []
for proc in psutil.process_iter(['name']):
    for file_name in files:
        if file_name in proc.info['name']:
            running_scripts.append(proc.info['name'])

# Recursively check directories and subdirectories within the drive
for root, dirs, files in os.walk(drive):
    for file_name in files:
        script_path = os.path.join(root, file_name)
        extension = os.path.splitext(file_name)[1].lower()
        if os.path.isfile(script_path) and os.access(script_path, os.X_OK):
            if extension not in excluded_extensions:
                script_count += 1
                if is_script_running(file_name):
                    running_count += 1
                else:
                    not_running_count += 1
                assess_behavior(script_path)
            else:
                non_script_count += 1

# Print the total number of scripts checked, non-script count, running count, and not running count
print(f"\nTotal files: {non_script_count+script_count}")
print(f"Non-script files: {non_script_count}\n")
print(f"Total number of scripts checked: {script_count}")
print(f"Running scripts: {running_count}")
print(f"Not running scripts: {not_running_count}\n")

# Print the names of all running scripts
if running_scripts:
    print("Running scripts:")
    for script in running_scripts:
        print(script)
